<?php

/**
 * @file
 * Contains ahs_discussions hooks.
 */

use Drupal\Core\Url;

use Drupal\comment\Entity\Comment;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\message\Entity\Message;

/**
 * Implements hook_node_update().
 *
 * Update the parents reference on child discussions,
 * and childrens reference on parent discussions.
 */
function ahs_discussions_node_update(NodeInterface $node) {
  if ($node->bundle() == 'discussion'){
    // This comparison must not be strict (!==). For some strange reason,
    // one is an integer and the other a string.
    if ($node->getRevisionId() != $node->original->getRevisionId()) {
      // Comment creation must be before cer updates,  otherwise the cerupdates
      // may trigger a second update before the first is finished. When the
      // first change record gets added after the second, it merges with it with
      // the result that the change record ends up with the same left and right
      // revision id.
      $comment = [
        'comment_type' => 'comments_with_changes',
        'field_name' => 'field_comments_with_changes',
        'subject' => 'Change record',
      ];
      \Drupal::service('changes.comment_with_changes')
        ->add($comment, $node, $node->original->getRevisionId(), $node->getRevisionId(), 'field_changes');
    }

    \Drupal::service('ahs_cer.simple_cer')->updateReferences('field_children', 'field_parents', $node);
    \Drupal::service('ahs_cer.simple_cer')->updateReferences('field_parents', 'field_children', $node);
    \Drupal::service('ahs_discussions.ancestry')->updateChildren($node);
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Create a parents reference on child discussions,
 * and childrens reference on parent discussions.
 * We have to use hook_entity_insert not hook_node_insert because of D#2604518.
 * @todo switch back to hook_node_insert when Drupal issue is fixed.
 */
function ahs_discussions_entity_insert(EntityInterface $node) {
  if (
    $node->getEntityTypeId() == 'node' &&
    $node->bundle() == 'discussion' &&
    $node->hasField('field_parents') &&
    $node->hasField('field_children')
  ) {
    // Initial comment creation must before cer updates on entity_insert,
    // otherwise the cerupdates will trigger a parent update and therefore an
    // comment before this initial comment is triggered.
    $comment = [
      'comment_type' => 'comments_with_changes',
      'field_name' => 'field_comments_with_changes',
      'subject' => 'Discussion started',
      'comment_body' => [
        'value' => "<p>Started this discussion.</p>",
        'format' => "full_html",
      ]
    ];
    \Drupal::service('changes.comment_with_changes')
      ->add($comment, $node, NULL, $node->getRevisionId(), 'field_changes');

    \Drupal::service('ahs_cer.simple_cer')->updateReferences('field_children', 'field_parents', $node);
    \Drupal::service('ahs_cer.simple_cer')->updateReferences('field_parents', 'field_children', $node);
    \Drupal::service('ahs_discussions.ancestry')->updateChildren($node);

    // Mark the node as read for its creator.
    // Needed because the creator doesn't immediately view autocreated children.
    history_write($node->id(), $node->getOwner());

    // Needs to use an entity hook not a node hook so that it comes after pathauto.
    ahs_discussions_notify_assignments($node);
  }
}

/**
 * Implements hook_node_presave().
 *
 */
function ahs_discussions_node_presave(NodeInterface $node) {
  if ($node->bundle() == 'discussion') {
    // Add an owner to autocreated children (helps Behat cleanup).
    if (($node->isNew()) && 
      empty($node->getOwnerId()) && 
      !empty(\Drupal::currentUser()->id())) {
      $node->setOwnerId(\Drupal::currentUser()->id());
    }
    
    // Update the ancestry when the first parent is changed.
    // No need to save or return modified entity.
    \Drupal::service('ahs_discussions.ancestry')->updateOwnAncestry($node);
    
    // Add creator or edit as participant
    ahs_discussions_add_editor_as_participant($node);
  }
}

/**
 * Implements hook_entity_update().
 *
 * Sends a notification when a discusion is (un)assigned to someone.
 */
function ahs_discussions_entity_update(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'discussion') {
    // Needs to use an entity hook not a node hook so that it comes after pathauto.
    ahs_discussions_notify_assignments($entity);
  }
}

/**
 * Adds the creator or editor of a discussion to the participants field in that
 * discussion, unless he is already present or just now removed.
 */
function ahs_discussions_add_editor_as_participant(NodeInterface $node) {
  // Identify the editor, using the creator if new.
  if ($node->isNew()) {
    $editor = $node->getOwnerId();
  }
  else {
    $editor = \Drupal::currentUser()->id();
  }
  // If editor is anonymous, then cannot add as participant.
  if ($editor == 0) {
    return;
  }
  // See if user is already listed as participant
  $alreadyListed = FALSE;
  foreach ($node->field_participants->getValue() as $participant) {
    // If the current user is listed, then nothing to do here.
    if ($participant['target_id'] === $editor) {
      $alreadyListed = TRUE;
      break;
    }
  }

  // See if user had been listed (and therefore just deliberately removed)
  if (!$alreadyListed && $node->original) {
    foreach ($node->original->field_participants->getValue() as $participant) {
      // If the current user is listed, then nothing to do here.
      if ($participant['target_id'] === $editor) {
        $alreadyListed = TRUE;
        break;
      }
    }
  }

  // If not already listed, add the current user.
  if (!$alreadyListed) {
    $values = $node->field_participants->getValue();
    $values[] = ['target_id' => $editor];
    $node->field_participants->setValue($values);
  }
}

/*
 * Send a notification email to anyone assigned/unassigned to/from a task
 * by someone else.
 */
function ahs_discussions_notify_assignments(NodeInterface $node) {
  $newAssigneds = array_column($node->field_assigned->getValue(), 'target_id');
  if (is_null($node->original)) {
    $oldAssigneds = [];
  }
  else {
    $oldAssigneds = array_column($node->original->field_assigned->getValue(), 'target_id');
  }

  $uid = \Drupal::currentUser()->id();
  $user = \Drupal\user\Entity\User::load($uid);

  // Send notification to newly assigned.
  $addedAssigneds = array_diff($newAssigneds, $oldAssigneds);
  foreach ($addedAssigneds as $addedAssigned) {
    // Don't notify user about her own actions.
    if ($addedAssigned !== \Drupal::currentUser()->id()) {
      $message = Message::create([
        'template' => 'discussion_assigned',
        'uid' => $addedAssigned,
      ]);
      $message->set('field_discussion', $node);
      $message->set('field_initiator', $user);
      $message->save();
      $notifier = \Drupal::service('message_notify.sender');
      $notifier->send($message);
    }
  }

  // Send notification to newly unassigned, as long as discussion is unfinished.
  if ($node->field_finished->value == FALSE) {
    $removedAssigneds = array_diff($oldAssigneds, $newAssigneds);
    foreach ($removedAssigneds as $removedAssigned) {
      // Don't notify user about her own actions.
      if ($removedAssigned !== \Drupal::currentUser()->id()) {
        $message = Message::create([
          'template' => 'discussion_unassigned',
          'uid' => $removedAssigned,
        ]);
        $message->set('field_discussion', $node);
        $message->set('field_initiator', $user);
        $message->save();
        $notifier = \Drupal::service('message_notify.sender');
        $notifier->send($message);
      }
    }
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Registers operation class for ahs_discuss form mode.
 */
function ahs_discussions_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  // Add a form for a custom node form without overriding the default
  // node form. To override the default node form, use hook_entity_type_alter().
  $entity_types['node']->setFormClass('ahs_discuss', 'Drupal\ahs_discussions\DiscussionForm');
}

/**
 * Implements hook_editor_js_settings_alter
 *
 * Allows the CKEditor on the body field to grow longer than the page length
 */
/*
function ahs_discussions_editor_js_settings_alter(array &$settings) {
  foreach ($settings['editor']['formats'] as $name => $value) {
    $settings['editor']['formats'][$name]['editorSettings']['autoGrow_maxHeight'] = '10000';
  }
}
*/

/**
 * Implements hook_form_alter_alter
 *
 * Remove parts of the discussion form that are added by other modules
 */
function ahs_discussions_form_node_discussion_ahs_discuss_form_alter(&$form, &$form_state) {
  // Remove the menu settings
  //$form['menu']['#access']=FALSE;

  //if !($entity->access('delete', $account)) {
  // Remove the delete button
  //$form['actions']['delete']['#access'] = FALSE;

  if (isset($form['actions']['delete'])) {
    $node = $form_state->getFormObject()->getEntity();
    $form['actions']['delete']['#access'] = $node->access('delete');
    $form['actions']['submit']['#dropbutton'] = 'save';
    $form['actions']['delete']['#dropbutton'] = 'save';
  }
  //$form['actions']['submit']['#attributes']['data-spy'] = 'affix';
  $form['actions']['#attributes']['data-spy'] = 'affix';

  // If there is no referenced parent, fake a 'Discuss' pseudo-breadcrumb
  // This is necessary because usually this root pseudo-breadcrumb comes
  // from the node--discuss--ahs-ancestry template used for the ahs_ancestry
  // view mode of the referenced parent entity.
  /*
  if ($form['field_parents']['widget']['#max_delta'] === 0) {
    $discussPath = Url::fromRoute('view.discussions.page_1')->toString();
    $preview= [
      '#markup' => '<ol class="breadcrumb"><li><a href="' . $discussPath . '">' . t('Discuss') . '</a></li>',
    ];
    $form['field_parents']['widget']['0']['preview_container'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['er-enhanced-preview'],
      ],
      'preview' => $preview,
    ];
    $form['field_parents']['widget']['0']['#prefix'] = '<div class="er-enhanced-new er-enhanced-previewing ahs-newonly">';
  }
  */
//  $form['field_parents']['widget']['0']['target_id']['#required'] = TRUE;
//  $form['field_parents']['widget']['0']['target_id']['#required_error'] = t('Please choose a discussion that this is part of.');
}

/**
 * Implements hook_module_implements_alter
 *
 * Changes the sequence in which hooks fires, so we can control whether ours fire
 * before or after those of other modules.
 */
function ahs_discussions_module_implements_alter(&$implementations, $hook) {
  $targetHooks = [
    // Let the comment module prepare the statistics table before we create a
    // comment. See  D#2604518.
    // @todo switch back to hook_node_insert when Drupal issue is fixed.
    'entity_insert',
    // Let our form alter override the menu module's.
    'form_alter',
    // Let node notifications use the path alias set by the pathauto module.
    'entity_insert',
    'entity_update',
  ];
  if (function_exists('ahs_miscellaneous_move_hook_last')) {
    ahs_miscellaneous_move_hook_last($targetHooks, 'ahs_discussions', $implementations, $hook);
  }
}

  /**
   * Implements hook_field_widget_form_alter().
   */
  function ahs_discussions_field_widget_entity_reference_autocomplete_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
    $items = $context['items'];
    $fieldName = $items->getFieldDefinition()->getName();
    if ($fieldName === 'field_parents') {
      ahs_discussion_addPreview($element, $items,  $context['delta'], 'ahs_discuss', FALSE);
      ahs_discussion_addRemove($element);
    }
  }

/**
 * Implements hook_field_widget_form_alter().
 */
function ahs_discussions_field_widget_ahs_entity_reference_with_views_autocreate_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $items = $context['items'];
  $fieldName = $items->getFieldDefinition()->getName();
  if ($fieldName === 'field_children') {
    ahs_discussion_addPreview($element, $items,  $context['delta'], 'ahs_discuss', FALSE);
    //ahs_discussion_addRemove($element);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ahs_discussions_field_widget_comment_default_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $items = $context['items'];
  $fieldName = $items->getFieldDefinition()->getName();
   if ($fieldName === 'field_comments_with_changes') {
     $element['status']['#access'] = FALSE;
     unset($element['#group']);
    ahs_discussion_addPreview($element, $items,  $context['delta'], 'ahs_discuss');
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ahs_discussions_field_widget_text_textarea_with_summary_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $items = $context['items'];
  $fieldName = $items->getFieldDefinition()->getName();
  if ($fieldName === 'body') {
    ahs_discussion_addPreview($element, $items,  $context['delta'], 'default', FALSE);
    //$element['#prefix'] = '<div class="ahs-preview-hide-edit-requested">';
    //$element['#suffix'] = '</div>';

    //kint(array_keys($items[$context['delta']]));
    //kint(array_keys($items[(string) $context['delta']]));
   // kint($element);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ahs_discussions_field_widget_file_generic_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $items = $context['items'];
  $fieldName = $items->getFieldDefinition()->getName();
  if ($fieldName === 'field_files') {
    //ahs_discussion_addPreview($element, $items,  $context['delta'], 'default', FALSE);
  }
}

function ahs_discussion_addPreview (&$element, $items, $delta, $viewMode = 'default', $alwaysHideEdit = TRUE) {
    // Add preview.
    $preview = $items[$delta]->view($viewMode);
    $element['preview_container'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['ahs-preview-preview'],
      ],
      'preview' => $preview,
    ];
  if ($alwaysHideEdit) {
    $element['#prefix'] = '<div class="ahs-preview-hide-edit">';
    $element['#suffix'] = '</div>';
  }
  else {
    $element['#prefix'] = '<div class="ahs-preview-hide-edit-if-hideui">';
    $element['#suffix'] = '</div>';
  }
}

function ahs_discussion_addRemove (&$element) {
  // Add a remove link to the preview.
  $element['ahs_preview_actions']['remove'] = [
    '#markup' => '<a class="ahs-preview-remove" href="">' . t('Remove') . '</a>',
  ];
  $element['#attached']['library'][] = 'ahs_discussions/remove';

}

function ahs_discussion_addEdit (&$element) {
  $element['ahs_preview_actions']['edit'] = [
    '#markup' => '<a class="ahs-preview-edit" href="">' . t('Edit') . '</a>',
  ];
  $element['#attached']['library'][] = 'ahs_discussions/edit';
}

/**
 * Implements hook_theme_suggestions_alter
 * Allow a template for any particular form
 */
/*
function ahs_discussions_theme_suggestions_alter(array &$suggestions, array $variables)
{
  // If this render array is a form
  if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
    $original_theme_hook = $variables['theme_hook_original'];

    // Add a template suggestion using the form ID.
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
  }

  return $suggestions;

}
*/

/**
 * Implements hook_node_access
 * Only allow users listed as participants to access a private discussion.
 */
/*
function ahs_discussions_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if( $node->bundle() === 'discussion' && $node->field_private->value){
    $user = $account->id();
    $participants = $ids = array_column($node->field_participants->getValue(), 'target_id');
    return AccessResult::forbiddenIf(!in_array($user, $participants))->cachePerUser()->addCacheableDependency($node);
  }
  else {
    return AccessResult::neutral();
  }
}
*/

function ahs_discussions_theme($existing, $type, $theme, $path) {
  return [
    'ahs_discussion_markers' => [
      'variables' => [
        'discussion' => NULL, 
        'view_mode' => 'teaser'
      ],
    ],
  ];
}

function template_preprocess_ahs_discussion_markers(&$variables) {
  // Generate a default comment links render array,
  // then plunder it to make a simpler 'New' mark.
  $context = ['view_mode' => $variables['view_mode']];
  $comment_links = \Drupal::service('comment.link_builder')->buildCommentedEntityLinks($variables['discussion'], $context);
  $variables['ahs_new_comments'] = [
    '#type' => 'link',
    '#title' => $comment_links['comment__field_comments_with_changes']['#links']['comment-new-comments']['title'],
    '#url' => $comment_links['comment__field_comments_with_changes']['#links']['comment-new-comments']['url'],
    '#attributes'=> $comment_links['comment__field_comments_with_changes']['#links']['comment-new-comments']['attributes'],
    '#cache' => $comment_links['comment__field_comments_with_changes']['#cache'],
    '#attached' => $comment_links['comment__field_comments_with_changes']['#attached'],
  ];

  // Class is not an array, needs to be made into one
  if (isset($variables['ahs_new_comments']['#attributes']['class']) &&
    !is_array($variables['ahs_new_comments']['#attributes']['class'])) {
    $variables['ahs_new_comments']['#attributes']['class'] = [$variables['ahs_new_comments']['#attributes']['class']];
  }
  // Make it a bootstrap label
  $variables['ahs_new_comments']['#attributes']['class'][] = 'ahs-new';
  $variables['ahs_new_comments']['#attributes']['class'][] = 'label';
  $variables['ahs_new_comments']['#attributes']['class'][] = 'label-success';
}

/*
 * Implements hook_comment_links_alter.
 * Removes the reply & delete links. We have to do this here, not in the
 * comment entity preprocess, because only a lazy builder is exposed there.
*/
/*function ahs_discussions_comment_links_alter(array &$links, $comment, array &$context) {
  $entity_bundle = \Drupal::entityTypeManager()
    ->getStorage($comment->entity_type->value)
    ->load($comment->entity_id->target_id)
    ->bundle();
  if ($comment->entity_type->value === 'node' && $entity_bundle === 'discussion') {
    if (isset($links['comment']['#links']['comment-edit']) &&
      $comment->getSubject() !== 'Discussion started'
    ) {
    }
  }
}*/

/*
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Send a notification email about a new comment (but not change records) 
 * to all users who commented in the same discussion within the last week 
 * and who are still listed as participants.
 */
function ahs_discussions_comment_insert($comment) {
  $entity_type = $comment->entity_type->value;
  if ($entity_type === 'node') {
    $entity_id = $comment->entity_id->target_id;
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($entity_id);

    // Send notifications about comments on discussions, but not change records.
    if ($node->bundle() === 'discussion' && $comment->getSubject() !== 'Change record') {
      \Drupal::logger('fff')->notice('discussion');
      // Get people listed as participants
      // (as people can choose to remove themselves from this).
      $participantIds = array_column($node->field_participants->getValue(), 'target_id');

      // Get recent comments on this discussion.
      $query = \Drupal::entityQuery('comment')
        ->condition('entity_id', $entity_id)
        ->condition('entity_type', $entity_type)
        // Changed within the last week.
        ->condition('changed', REQUEST_TIME - 604800, '>')
        // No point in notifying about one's own comment.
        ->condition('uid', $comment->getOwnerId(), '!=')
        // Can't notify anonymous user.
        ->condition('uid', 0, '!=');
      if ($participantIds) {
        // Listed as participant.
        $query->condition('uid', $participantIds, 'IN');
      }
      $recentCommentIds = $query->execute();
      $recentComments = \Drupal::entityTypeManager()
        ->getStorage('comment')
        ->loadMultiple($recentCommentIds);

      // Notify comment authors, but only once each.
      $notifiedUserIds = [];
      foreach ($recentComments as $recentComment) {
        $uid = $recentComment->getOwnerId();
        // If not already notified ...
        if (!in_array($uid, $notifiedUserIds)) {
          // Send this user a notification.
          $message = Message::create([
            'template' => 'discussion_comment',
            'uid' => $uid,
          ]);
          $message->set('field_comment', $comment);
          $message->set('field_discussion', $node);
          $message->save();
          $notifier = \Drupal::service('message_notify.sender');
          $notifier->send($message);

          // Add this user to the list of already notified people.
          array_push($notifiedUserIds, $uid);
        }
      }
    }
  }
}