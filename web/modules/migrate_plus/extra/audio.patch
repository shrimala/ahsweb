diff --git a/src/Plugin/MediaEntity/Type/Audio.php b/src/Plugin/MediaEntity/Type/Audio.php
index e2f0d37..4838c3c 100755
--- a/src/Plugin/MediaEntity/Type/Audio.php
+++ b/src/Plugin/MediaEntity/Type/Audio.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\media_entity_audio\Plugin\MediaEntity\Type;
 
-use Drupal\media_entity\MediaBundleInterface;
 use Drupal\media_entity\MediaInterface;
 use Drupal\media_entity\MediaTypeBase;
+use Drupal\Core\Form\FormStateInterface;
 
 /**
  * Provides media type plugin for Audio.
@@ -20,23 +20,24 @@ class Audio extends MediaTypeBase {
   /**
    * {@inheritdoc}
    */
-  public function settingsForm(MediaBundleInterface $bundle) {
-    $form = array();
-
-    $options = array();
-    $allowed_field_types = array('file');
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    /** @var \Drupal\media_entity\MediaBundleInterface $bundle */
+    $bundle = $form_state->getFormObject()->getEntity();
+    $options = [];
+    $allowed_field_types = ['file'];
     foreach ($this->entityFieldManager->getFieldDefinitions('media', $bundle->id()) as $field_name => $field) {
       if (in_array($field->getType(), $allowed_field_types) && !$field->getFieldStorageDefinition()->isBaseField()) {
         $options[$field_name] = $field->getLabel();
       }
     }
-    $form['source_field'] = array(
+
+    $form['source_field'] = [
       '#type' => 'select',
       '#title' => t('Field with source information'),
-      '#description' => t('Field on media entity that stores Audio file.'),
+      '#description' => t('Field on media entity that stores Audio file. You can create a bundle without selecting a value for this dropdown initially. This dropdown can be populated after adding fields to the bundle.'),
       '#default_value' => empty($this->configuration['source_field']) ? NULL : $this->configuration['source_field'],
       '#options' => $options,
-    );
+    ];
 
     return $form;
   }
@@ -51,7 +52,7 @@ class Audio extends MediaTypeBase {
   /**
    * {@inheritdoc}
    */
-  public function getField(MediaInterface $media , $name) {
+  public function getField(MediaInterface $media, $name) {
     return FALSE;
   }
 

